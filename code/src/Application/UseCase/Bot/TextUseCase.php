<?php

declare(strict_types=1);

namespace Art\Code\Application\UseCase\Bot;

use Art\Code\Domain\Contract\TelegramGroupRepositoryInterface;
use Art\Code\Domain\Entity\TelegramUser;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection;

class TextUseCase
{
    public function getGreetingsText(bool $isNewUser): string
    {
        if ($isNewUser) {
            $text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–≤–æ–∏—Ö —Å–æ–±—ã—Ç–∏–π.\n";
            $text .= "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è? üòé";
        } else {
            $text = "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòé";
        }

        return $text;
    }

    public function getGreetingsGroupText(TelegramUser $user): string
    {
        $name = $user->name ?? '';
        $surname = $user->surname ?? '';
        $userLogin = $user->login ?? '';

        $text = "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n\n";
        $text .= "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞—á–∞–≤ —Å–æ –º–Ω–æ–π –¥–∏–∞–ª–æ–≥ -";
        $text .= "\n@reminders_event_bot";
        $text .= "\nP.S. –ú–µ–Ω—è –¥–æ–±–∞–≤–∏–ª –≤ —á–∞—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–∏–ª —Å–æ–±—ã—Ç–∏—è " . $name . " " . $surname . " (@" . $userLogin . "), –ø–æ—ç—Ç–æ–º—É —Ç—ã–∫–∞–π—Ç–µ –ø–∞–ª–æ—á–∫–æ–π –µ–≥–æ üòé";

        return $text;
    }

    public function getListGroupText(Collection $listGroups): string
    {
        if(count($listGroups) > 0){

            $text = "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø\n\n</b>";

            foreach ($listGroups as $group){
                $text .= "<b>" . $group->id . ".</b> " . $group->name . "\n";
            }

            $text .= "\n<b>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ <i>group</i></b>";
            $text .= "\n<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: group 1)</i>";
            $text .= "\n‚ÄºÔ∏è<b>–£—á—Ç–∏—Ç–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è - –±–æ—Ç –≤—ã–π–¥–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã –∏ –≤—Å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∑–∞ –≥—Ä—É–ø–ø–æ–π —Å–æ–±—ã—Ç–∏—è - –±—É–¥–µ—Ç –æ–ø–æ–≤–µ—â–∞—Ç—å –ª–∏—á–Ω–æ</b>";

            return $text;
        }
        return "<b>–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—ã.</b>";
    }

    public function getListEventText(Collection $listEvents, TelegramGroupRepositoryInterface $groupRepository, string $userChatId): string
    {
        if (count($listEvents) > 0) {

            $text = "üìù <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö co–±—ã—Ç–∏–π\n\n</b>";

            foreach ($listEvents as $event) {

                $eventName = $this->getEventNameByType()[$event->type];
                $dateOfEvent = Carbon::parse($event->date_event_at)->format('d.m.Y');
                $periodicity = $this->getPeriodText()[$event->period];

                $groupName = '';
                if($event->group_id === 0){
                    $notificationMethod = '–ª–∏—á–Ω–æ';
                }else{
                    $notificationMethod = '–≤ –≥—Ä—É–ø–ø–µ';
                    $group = $groupRepository->getFirstById($event->group_id, $userChatId);
                    $groupName = $group->name ?? '–≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!';
                }

                $text .= "<b>" . $event->id . ".</b> " . $eventName . "\n";
                $text .= "    –ò–º—è: <i>" . $event->name . "</i>\n";
                $text .= "    –î–∞—Ç–∞: <i>" .  $dateOfEvent . "</i>\n";
                $text .= "    –°–ø–æ—Å–æ–± –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: <i>" .  $notificationMethod . "</i>\n";
                if($event->group_id !== 0){
                    $text .= "    –ì—Ä—É–ø–ø–∞: <i>" .  $groupName . "</i>\n";
                }
                $text .= "    –í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: <i>" .  $event->notification_time_at . "</i>\n";
                $text .= "    –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: <i>" .  $periodicity . "</i>\n\n";
            }

            $text .= "<b>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ <i>event</i></b>";
            $text .= "\n<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: event 1)</i>";

            return $text;
        }
        return "<b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.</b>";
    }

    public function getPrivateCabinetText(): string
    {
        return "<b>üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n</b>";
    }

    public function getSuccessConfirmText(string $type): string
    {
        $text = '';
        if ($type === 'birthday') {
            $text = "<b>üéâ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>";
        }

        return $text;
    }

    public function getAboutText(): string
    {
        $text = "<b>‚ùî–û –ø—Ä–æ–µ–∫—Ç–µ</b>";

        $text .= "\n\n–ú—ã —á–∞—Å—Ç–æ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, –≥–æ–¥–æ–≤—â–∏–Ω—ã..";
        $text .= "\n–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ —á–∞—Ç–∞—Ö, –∫–∞–Ω–∞–ª–∞—Ö –∏–ª–∏ –ª–∏—á–Ω–æ,";
        $text .= "\n–∏—Å—Ö–æ–¥—è –æ—Ç –≤–∞—à–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –±–æ—Ç–∞.";

        $text .= "\n\n–¢–µ–ø–µ—Ä—å –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –±—É–¥—É—Ç –≤ –∫—É—Ä—Å–µ –≤–∞–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è!";

        $text .= "\n\n–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è, –Ω–µ —Å—É–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ üòé";
        $text .= "\nVersion: 1.0.0";

        $text .= "\n\n–î–ª—è —Ñ–∏–¥–±–µ–∫–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–∏—à–∏—Ç–µ - <a href='https://t.me/artur_timerkhanov'>–°–æ–∑–¥–∞—Ç–µ–ª—å</a>";

        return $text;
    }

    public function getWhatCanText(): string
    {
        $text = "<b>‚ùî–ß—Ç–æ —è –º–æ–≥—É</b>";

        $text .= "\n\n- –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –¢–µ–±–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è, —Å–æ–±—ã—Ç–∏–∏ —Ä–∞–∑ –≤ –≥–æ–¥";
        $text .= "\n–∏–ª–∏ –µ–¥–∏–Ω–æ–∂–¥—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è <i>(–ª–∏—á–Ω–æ –∏–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ)</i>";

        $text .= "\n\n- –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –¢–µ–±–µ –æ —Ç–≤–æ–∏—Ö –∑–∞–º–µ—Ç–∫–∞—Ö —É–∫–∞–∑–∞–Ω—ã—Ö —Ä–∞–Ω–µ–µ";

        return $text;
    }

    public function getHowUseText(): string
    {
        $text = "<b>‚ùî–ö–∞–∫ –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</b>";

        $text .= "\n\n<b>1.</b>  –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.";

        $text .= "\n\n<b>2.</b>  –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.";

        $text .= "\n\n<b>3.</b>  –£–∫–∞–∂–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞ - –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.";
        $text .= "\n      –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è, –∑–∞–º–µ—Ç–∫–∏.";

        $text .= "\n\n<b>4.</b>  –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è - –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è.";
        $text .= "\n      –í —Å–ª—É—á–∞–µ –∑–∞–º–µ—Ç–æ–∫ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.";

        $text .= "\n\n<b>5.</b>  –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –≤–∞—Å —É–≤–µ–¥–æ–º–ª—è—Ç—å - –ª–∏—á–Ω–æ –∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ.";

        $text .= "\n\n<b>6.</b>  –í —Å–ª—É—á–∞–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ - –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞.";
        $text .= "\n      <i>(–≤ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç)</i>";

        $text .= "\n\n      <b>Well done!</b>";

        return $text;
    }

    private function getEventNameByType(): array
    {
        return [
            'birthday' => '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
            'note' => '–ó–∞–º–µ—Ç–∫–∞'
        ];
    }

    private function getPeriodText(): array
    {
        return [
            'annually' => '—Ä–∞–∑ –≤ –≥–æ–¥',
            'quarterly' => '—Ä–∞–∑ –≤ –∫–≤–∞—Ä—Ç–∞–ª',
            'monthly' => '—Ä–∞–∑ –≤ –º–µ—Å—è—Ü',
            'weekly' => '—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
            'daily' => '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
            'once' => '–æ–¥–∏–Ω —Ä–∞–∑',
        ];
    }
}